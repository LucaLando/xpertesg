import numpy as np
import streamlit as st
import pandas as pd
import plotly.express as px
import openai
import os
import json
import plotly.graph_objects as go

st.set_page_config(page_title="XPertESG", layout="wide")
COR_XP = "#FECB00"
ALTO_ESG = "#04C427"
MEDIO_ESG = "#2BACB4"
BAIXO_ESG = "#ADA9BD"

# Dados simulados
df = pd.read_csv("base5_clientes_esg10000.csv")

# Mapear c√≥digos de risco para nomes leg√≠veis
mapa_perfil = {0: "Conservador", 1: "Moderado", 2: "Agressivo"}
df["PerfilRisco"] = df["PerfilRisco"].map(mapa_perfil)
# Garante colunas m√≠nimas para o gr√°fico de dispers√£o


# üßæ Adicionar nome fict√≠cio com base no g√™nero
nomes_masculinos = [
    "Lucas", "Jo√£o", "Pedro", "Rafael", "Gustavo", "Matheus", "Thiago", "Bruno", "Felipe", "Andr√©",
    "Carlos", "Daniel", "Henrique", "Eduardo", "Leonardo", "Gabriel", "Caio", "Marcelo", "Igor", "Victor",
    "Renato", "Rodrigo", "Alexandre", "Vitor", "Diego", "Fernando", "Ricardo", "Samuel", "Luan", "F√°bio",
    "Paulo", "Ot√°vio", "Hugo", "Ant√¥nio", "Jonathan", "Roberto", "Vinicius", "Murilo", "Leandro", "Jorge",
    "Elias", "Juliano", "Marcos", "Raul", "Estev√£o", "Heitor", "Nelson", "Brayan", "Caetano", "Wallace",
    "Danilo", "Adriano", "J√∫nior", "Alfredo", "Valter", "Nathan", "Wesley", "Jeferson", "Maicon", "Ezequiel",
    "Cristiano", "William", "Matias", "Eliseu", "Luciano", "Fl√°vio", "Rog√©rio", "Saulo", "S√©rgio", "Davi",
    "√ârico", "Iago", "Emanuel", "Luiz", "Giovani", "Tiago", "√âdson", "Silas", "Mois√©s", "Afonso",
    "Douglas", "Washington", "Breno", "Joabe", "Geovani", "Ruan", "Nicolas", "Cl√°udio", "Alex", "L√°zaro",
    "Adriel", "Milton", "R√¥mulo", "Israel", "Anderson", "Tales", "Valmir", "Eron"
]

nomes_femininos = [
    "Ana", "Beatriz", "Camila", "Daniela", "Eduarda", "Fernanda", "Gabriela", "Helena", "Isabela", "Juliana",
    "Karen", "Larissa", "Mariana", "Nat√°lia", "Ol√≠via", "Patr√≠cia", "Queila", "Renata", "Sabrina", "Tatiane",
    "√örsula", "Vit√≥ria", "Wendy", "Ximena", "Yasmin", "Zuleika", "Aline", "Bianca", "Carolina", "D√©bora",
    "Elaine", "Fabiana", "Giovana", "Helo√≠sa", "Ingrid", "J√©ssica", "K√°tia", "Let√≠cia", "Michele", "Nicole",
    "Priscila", "Raquel", "Simone", "Tain√°", "Vanessa", "Waleska", "Yara", "Z√©lia", "Am√©lia", "B√°rbara",
    "Clarissa", "Denise", "Estela", "Fl√°via", "Graziele", "Hort√™ncia", "Ione", "Joana", "Kelly", "Lilian",
    "M√¥nica", "Noemi", "Odete", "Paloma", "Rafaela", "S√¥nia", "Tereza", "Val√©ria", "Wilma", "Zilda",
    "Andressa", "C√≠ntia", "Dandara", "Emanuelle", "Francine", "Gl√°ucia", "Herm√≠nia", "Ivone", "Jacira", "K√©sia",
    "Luzia", "Marta", "Nadja", "Orlanda", "Pen√©lope", "Regina", "Sheila", "Talita", "Vera", "Zenaide",
    "Aurora", "Celina", "Dalva", "Eliana", "Fab√≠ola", "Gislaine", "Hilda", "Iraci", "Jacqueline", "L√∫cia"
]

import random

def gerar_nome(genero):
    if genero == "Masculino":
        return random.choice(nomes_masculinos)
    elif genero == "Feminino":
        return random.choice(nomes_femininos)
    else:
        return "Cliente XP"


# Classificar propens√£o manualmente
def classificar_faixa(p):
    if p <= 0.40:
        return "Baixa"
    elif p <= 0.74:
        return "M√©dia"
    else:
        return "Alta"

df["faixa_propensao"] = df["propensao_esg"].apply(classificar_faixa)

# Aplica nomes com base no g√™nero
nomes = nomes_masculinos + nomes_femininos
df["nome"] = [random.choice(nomes) for _ in range(len(df))]



top_baixa = df[df["faixa_propensao"] == "Baixa"].nlargest(5, "propensao_esg")
top_media = df[df["faixa_propensao"] == "M√©dia"].nlargest(5, "propensao_esg")
top_alta = df[df["faixa_propensao"] == "Alta"].nlargest(5, "propensao_esg")

if "usuario" not in st.session_state:
    st.session_state.usuario = ""
if "api_key" not in st.session_state:
    st.session_state.api_key = ""
if "mensagens" not in st.session_state:
    st.session_state.mensagens = []

def carregar_historico(usuario):
    arq = f"historico_{usuario}.json"
    return json.load(open(arq, encoding="utf-8")) if os.path.exists(arq) else []

def salvar_historico(usuario, mensagens):
    with open(f"historico_{usuario}.json", "w", encoding="utf-8") as f:
        json.dump(mensagens, f, ensure_ascii=False, indent=2)

st.sidebar.markdown("## üë§ Login do Assessor")
usuario_input = st.sidebar.text_input("Digite seu nome de usu√°rio")
if st.sidebar.button("Entrar") and usuario_input:
    st.session_state.usuario = usuario_input
    st.session_state.mensagens = carregar_historico(usuario_input)
    st.success(f"Bem-vindo, {usuario_input}!")

if st.session_state.usuario:
    st.title(f"üìä XPertESG ‚Äì Assessor: {st.session_state.usuario}")
    aba = st.sidebar.radio("üìÇ Escolha uma se√ß√£o:", [
        "üë• Clientes",
        "üó£Ô∏è Chat com o F√°bio",
        "üì¶ Produtos ESG",
        "üìà Dashboards",
        "üìå Recomenda√ß√µes",
        "üí° Aloca√ß√£o Inteligente",
        "üì¢ Campanha"
    ])

    if aba == "üë• Clientes":
        st.subheader("üìã Base de Clientes da XP")
        st.dataframe(df, use_container_width=True)

    elif aba == "üó£Ô∏è Chat com o F√°bio":
        import re
        import pandas as pd
    
        st.subheader("üß† F√°bio ‚Äì Especialista Virtual ESG")
    
        # ‚Äî‚Äî‚Äî Configura√ß√£o da API ‚Äî‚Äî‚Äî
        if "api_key" not in st.session_state:
            st.session_state.api_key = ""
        with st.expander("üîê Configurar Chave da API OpenAI", expanded=True):
            st.session_state.api_key = st.text_input(
                "Cole aqui sua API Key:", 
                type="password", 
                key="openai_api_key"
            )
    
        # ‚Äî‚Äî‚Äî Inicializa hist√≥rico ‚Äî‚Äî‚Äî
        if "mensagens" not in st.session_state:
            st.session_state.mensagens = []
    
        # ‚Äî‚Äî‚Äî Carrega base de clientes ESG ‚Äî‚Äî‚Äî
        @st.cache_data
        def load_clients(path="base5_clientes_esg10000.csv"):
            return pd.read_csv(path)
        if "df_clientes" not in st.session_state:
            st.session_state.df_clientes = load_clients()
    
        df = st.session_state.df_clientes
    
        # ‚Äî‚Äî‚Äî Detecta automaticamente a coluna de ID ‚Äî‚Äî‚Äî
        id_cols = [c for c in df.columns if "id" in c.lower()]
        if id_cols:
            id_col = id_cols[0]
        else:
            id_col = None
            st.error("N√£o foi poss√≠vel encontrar coluna de ID no CSV de clientes.")
    
        # ‚Äî‚Äî‚Äî Renderiza hist√≥rico ‚Äî‚Äî‚Äî
        for msg in st.session_state.mensagens:
            if msg["role"] == "user":
                st.chat_message("user").write(msg["content"])
            else:
                st.chat_message("assistant").write(msg["content"])
    
        # ‚Äî‚Äî‚Äî Input fixo no rodap√© ‚Äî‚Äî‚Äî
        user_input = st.chat_input("Digite sua pergunta para o F√°bio:")
    
        if user_input:
            # 1) Armazena pergunta
            st.session_state.mensagens.append({"role": "user", "content": user_input})
    
            # 2) Tenta extrair contexto do cliente
            client_context = None
            m = re.search(r"cliente\s+(\d+)", user_input, flags=re.IGNORECASE)
            if m and id_col:
                cli_id = int(m.group(1))
                if cli_id in df[id_col].values:
                    rec = df.loc[df[id_col] == cli_id].iloc[0]
                    # Ajuste os nomes abaixo conforme as colunas do seu CSV
                    client_context = (
                        f"DADOS DO CLIENTE {cli_id}:\n"
                        f"‚Ä¢ Nome: {rec.get('Nome', rec.get('nome', '‚Äî'))}\n"
                        f"‚Ä¢ Idade: {rec.get('Idade', rec.get('idade', '‚Äî'))}\n"
                        f"‚Ä¢ Perfil de risco: {rec.get('PerfilRisco', rec.get('perfil_risco', '‚Äî'))}\n"
                        f"‚Ä¢ Engajamento ESG: {rec.get('EngajamentoESG', rec.get('engajamento_esg', '‚Äî'))}\n"
                        f"‚Ä¢ Propens√£o ESG: {rec.get('PropensaoESG', rec.get('propensao_esg', '‚Äî'))}\n"
                    )
    
            # 3) System prompt
            system_prompt = {
                "role": "system",
                "content": """
    Voc√™ √© o Fabio, um assistente virtual especializado em produtos de investimento ESG da XP Inc., voltado para assessores de investimentos da pr√≥pria XP.
    
    Seu papel √© fornecer orienta√ß√£o t√©cnica, estrat√©gica e educacional sobre a aloca√ß√£o de capital em produtos com perfil ESG, considerando sempre:
    - A carteira de produtos ESG dispon√≠vel na XP.
    - O perfil de risco do cliente.
    - O grau de propens√£o ESG do cliente (quando informado).
    - As diretrizes regulat√≥rias e reputacionais da XP Inc.
    
    üß† CONHECIMENTO E COMPORTAMENTO
    Voc√™ √© especialista em:
    ‚Ä¢ Fundos ESG (FIA, FIP, FIE, FIDC ESG, etc.)
    ‚Ä¢ Deb√™ntures e COEs com prop√≥sito ESG
    ‚Ä¢ Certificados como CPR Verde, cr√©ditos de carbono, e ativos ambientais
    ‚Ä¢ Crit√©rios ESG usados pela XP (ex: frameworks SASB, ICVM 59, Taxonomia Verde)
    ‚Ä¢ Alinhamento a padr√µes internacionais (ODS/Agenda 2030, Selo B, CSA da S&P etc.)
    
    Voc√™ se comunica com linguagem empresarial, t√©cnica e confi√°vel, em linha com o tom institucional da XP Inc.
    Quando n√£o souber ou n√£o puder afirmar algo com seguran√ßa, diga:
    "Para garantir precis√£o, recomendo consultar a √°rea de produtos ou compliance da XP."
    
    üîç FONTES E ATUALIZA√á√ïES
    Voc√™ pode acessar os sites oficiais da XP para buscar dados atualizados sobre produtos:
    https://conteudos.xpi.com.br/esg/
    https://www.xpi.com.br
    https://conteudos.xpi.com.br
    
    üìÇ BASES DISPON√çVEIS
    Voc√™ possui acesso ao documento base5_clientes_esg10000.csv com dados de perfil dos clientes.
    
    üéØ ORIENTA√á√ÉO AO ASSESSOR
    Voc√™ atua exclusivamente com assessores da XP:
    - Nunca fale diretamente com o cliente final.
    - Sempre oriente com base em dados t√©cnicos, n√£o em prefer√™ncias pessoais.
    - Ao indicar produtos, fa√ßa cruzamento com a base de clientes sempre que poss√≠vel.
    
    ‚ö†Ô∏è RESTRI√á√ïES DE CONDUTA
    - N√£o faz recomenda√ß√µes de suitability.
    - N√£o interpreta normas legais, apenas menciona regula√ß√£o pela ICVM 59 ou Taxonomia Verde.
    - Em temas delicados, recomende consultar canais internos da XP.
    """
            }
    
            # 4) Monta mensagens e chama a API
            full_messages = [system_prompt]
            if client_context:
                full_messages.append({"role": "system", "content": client_context})
            full_messages += st.session_state.mensagens
    
            try:
                import openai
                client = openai.OpenAI(api_key=st.session_state.api_key)
                resposta = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=full_messages,
                    temperature=0.7,
                    max_tokens=700
                )
                resposta_fabio = resposta.choices[0].message.content
            except Exception as e:
                resposta_fabio = f"Erro na chamada √† API: {e}"
    
            # 5) Armazena resposta e persiste hist√≥rico
            st.session_state.mensagens.append({"role": "assistant", "content": resposta_fabio})
            salvar_historico(st.session_state.usuario, st.session_state.mensagens)
    


    elif aba == "üì¶ Produtos ESG":
        st.subheader("üå± Produtos ESG dispon√≠veis")
        produtos_esg = [
            {"nome": "Fundo XP Essencial ESG", "tipo": "Renda Fixa", "risco": "Baixo", "taxa": "0,9% a.a.", "arquivo": "lamina_xp_essencial.pdf"},
            {"nome": "ETF XP Sustent√°vel", "tipo": "ETF", "risco": "M√©dio", "taxa": "0,3% a.a.", "arquivo": "lamina_xp_etf.pdf"},
            {"nome": "Fundo XP Verde A√ß√µes", "tipo": "A√ß√µes", "risco": "Alto", "taxa": "1,2% a.a.", "arquivo": "lamina_xp_verde.pdf"},
            {"nome": "Fundo XP Impacto Social", "tipo": "Multimercado", "risco": "M√©dio", "taxa": "1,0% a.a.", "arquivo": "lamina_xp_impacto.pdf"},
            {
                "nome": "Trend ESG Global D√≥lar FIM",
                "tipo": "Multimercado Internacional",
                "risco": "M√©dio",
                "taxa": "0,5% a.a.",
                "descricao": "Fundo indexado que investe em ETFs internacionais com foco em empresas reconhecidas por boas pr√°ticas ESG.",
                "lamina": "https://conteudos.xpi.com.br/previdencia-privada/relatorios/pandhora-esg-prev-o-novo-fundo-de-acoes-da-pandhora/"
            },
            {
                "nome": "Pandhora ESG Prev",
                "tipo": "Previd√™ncia ‚Äì A√ß√µes Long Bias",
                "risco": "Alto",
                "taxa": "1,5% a.a.",
                "descricao": "Fundo de previd√™ncia com estrat√©gia Long Bias e filtro ESG, combinando a√ß√µes, ativos macro e exposi√ß√£o internacional.",
                "lamina": "https://conteudos.xpi.com.br/previdencia-privada/relatorios/pandhora-esg-prev-o-novo-fundo-de-acoes-da-pandhora/"
            },
            {
                "nome": "JGP A√ß√µes 100 Prev XP Seguros FIC FIA",
                "tipo": "Previd√™ncia ‚Äì A√ß√µes",
                "risco": "Alto",
                "taxa": "2,0% a.a.",
                "descricao": "Fundo de a√ß√µes com foco em empresas sustent√°veis, dispon√≠vel na plataforma de previd√™ncia da XP.",
                "lamina": "https://conteudos.xpi.com.br/previdencia-privada/jgp-acoes-100-prev-xp-seg-fic-fia/"
            }
        ]
    
        df_rent = pd.read_csv("rentabilidade_fundos_esg_60m.csv")
    
        for p in produtos_esg:
            with st.expander(p["nome"]):
                st.markdown(f"**Tipo:** {p['tipo']}")
                st.markdown(f"**Risco:** {p['risco']}")
                st.markdown(f"**Taxa de administra√ß√£o:** {p['taxa']}")
                if "arquivo" in p:
                    st.markdown(f"[üìÑ Acessar L√¢mina do Produto](./{p['arquivo']})")
                elif "lamina" in p:
                    st.markdown(f"[üìÑ Acessar L√¢mina do Produto]({p['lamina']})")
    
                # Gr√°fico de rentabilidade acumulada e % retorno
                if p["nome"] in df_rent.columns:
                    df_plot = df_rent[["Data", p["nome"]]].copy()
                    df_plot["% Retorno"] = (df_plot[p["nome"]] / df_plot[p["nome"]].iloc[0] - 1) * 100
    
                    fig_rent = px.line(
                        df_plot,
                        x="Data",
                        y=[p["nome"], "% Retorno"],
                        title="Simula√ß√£o de Rentabilidade Acumulada",
                        labels={
                            "value": "Valor",
                            "variable": "M√©trica",
                            "Data": "Data"
                        },
                        line_shape="linear"
                    )
    
                    fig_rent.update_traces(line=dict(width=3))
                    fig_rent.for_each_trace(
                        lambda t: t.update(line_color="#FFFB00") if t.name == p["nome"] else t.update(line_color="#888888", line_dash="dot")
                    )
                    st.plotly_chart(fig_rent, use_container_width=True)
                else:
                    st.info("Simula√ß√£o de rentabilidade n√£o dispon√≠vel para este fundo.")

    elif aba == "üìà Dashboards":
        st.subheader("üìä An√°lise ESG da Base de Clientes")

        # üëá Garantir que a coluna ValorAlocadoESG exista (ou simular se estiver ausente)
        if "ValorAlocadoESG" not in df.columns:
            df["ValorAlocadoESG"] = np.random.uniform(5000, 80000, size=len(df)).round(2)
    
        # üëá Garantir que a coluna ValorTotalCarteira exista
        if "ValorTotalCarteira" not in df.columns:
            # Supondo que o restante da carteira seja 2x o valor ESG (ajuste conforme necess√°rio)
            df["ValorTotalCarteira"] = (df["ValorAlocadoESG"] * np.random.uniform(2.5, 5.0, size=len(df))).round(2)
    
    
            
        st.markdown("### üöÄ Indicador de Aloca√ß√£o ESG")

        # Verifica√ß√£o das colunas no DataFrame
        if "ValorAlocadoESG" in df.columns and "ValorTotalCarteira" in df.columns:

            capital_total = df["ValorTotalCarteira"].sum()
            capital_esg = df["ValorAlocadoESG"].sum()

            # C√°lculo da propor√ß√£o ESG (%)
            if capital_total > 0:
                percentual_esg = round((capital_esg / capital_total) * 100, 2)
            else:
                percentual_esg = 0.0

            # Meta futura (%)
            meta_percentual = 10  # voc√™ pode ajustar isso dinamicamente se quiser

            # Constru√ß√£o do gr√°fico tipo "veloc√≠metro"
            fig_gauge = go.Figure(go.Indicator(
                mode="gauge+number+delta",
                value=percentual_esg,
                delta={'reference': meta_percentual, 'increasing': {'color': ALTO_ESG}, 'decreasing': {'color': "red"}},
                gauge={
                    'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': BAIXO_ESG},
                    'bar': {'color': ALTO_ESG, 'thickness': 0.3},
                    'bgcolor': BAIXO_ESG,
                    'steps': [
                        {'range': [0, percentual_esg], 'color': ALTO_ESG},
                        {'range': [percentual_esg, 100], 'color': BAIXO_ESG}
                    ],
                    'threshold': {
                        'line': {'color': COR_XP, 'width': 10},
                        'thickness': 1,
                        'value': meta_percentual
                    }
                },
                title={'text': "Propor√ß√£o de Capital Alocado em ESG (%)"}
            ))

            fig_gauge.update_layout(
                height=400,
                font=dict(size=16),
                paper_bgcolor="#111111",
                plot_bgcolor="#111111",
                font_color="white"
            )

            st.plotly_chart(fig_gauge, use_container_width=True)

        else:
            st.warning("Colunas 'ValorAlocadoESG' e/ou 'ValorTotalCarteira' n√£o encontradas na base.")
    
    
    
    
    
            
        _, col1, _ = st.columns(3)
        with col1:
            fig1 = px.pie(
                df,
                names="faixa_propensao",
                title="Distribui√ß√£o por Faixa ESG",
                color="faixa_propensao",
                color_discrete_map={
                    "Alta": ALTO_ESG,
                    "M√©dia": MEDIO_ESG,
                    "Baixa": BAIXO_ESG
                }
            )
            fig1.update_traces(textinfo="label+percent")
            st.plotly_chart(fig1, use_container_width=True)

        col3, col4, col5 = st.columns(3)
        with col3:
            st.markdown("### üîù Top 5 - Baixa Propens√£o")
            st.dataframe(top_baixa[["nome", "propensao_esg", "PerfilRisco"]])
        with col4:
            st.markdown("### üîù Top 5 - M√©dia Propens√£o")
            st.dataframe(top_media[["nome", "propensao_esg", "PerfilRisco"]])
        with col5:
            st.markdown("### üîù Top 5 - Alta Propens√£o")
            st.dataframe(top_alta[["nome", "propensao_esg", "PerfilRisco"]])
       
    
        # NOVOS GR√ÅFICOS E INSIGHTS ESG
    
        st.markdown("### ‚è≥ Clientes com ativos vencendo em at√© 30 dias")

        if "vence_em_dias" in df.columns:
            vencendo_30 = df[df["vence_em_dias"] <= 30]
    
            # Agrupar corretamente
            agrupado = vencendo_30.groupby(["PerfilRisco", "faixa_propensao"]).size().reset_index(name="Quantidade")
    
            fig_vencendo = px.bar(
                agrupado,
                x="PerfilRisco",
                y="Quantidade",
                color="faixa_propensao",
                barmode="group",  # ‚Üê garante colunas agrupadas
                title="Clientes com Ativos ESG Pr√≥ximos do Vencimento",
                color_discrete_map={
                    "Alta": ALTO_ESG,
                    "M√©dia": MEDIO_ESG,
                    "Baixa": BAIXO_ESG
                },
                labels={"PerfilRisco": "Perfil de Risco", "Quantidade": "Clientes"}
            )
    
            fig_vencendo.update_layout(
                height=450,
                bargap=0.2,
                plot_bgcolor="#111111",
                paper_bgcolor="#111111",
                font_color="#FFFFFF",
                legend_title_text="Faixa ESG"
            )
    
            st.plotly_chart(fig_vencendo, use_container_width=True)
        else:
            st.warning("Coluna 'vence_em_dias' n√£o encontrada na base.")

    
        st.markdown("### üì¶ Distribui√ß√£o de Clientes por Categoria de Produto e Faixa ESG")
    
        if "categoria_produto" in df.columns and "faixa_propensao" in df.columns:
            agrupado = df.groupby(["categoria_produto", "faixa_propensao"]).size().reset_index(name="Quantidade")
    
            fig_categoria = px.bar(
                agrupado,
                x="categoria_produto",
                y="Quantidade",
                color="faixa_propensao",
                barmode="group",
                title="Clientes por Categoria de Produto e Faixa ESG",
                color_discrete_map={
                    "Alta": ALTO_ESG,
                    "M√©dia": MEDIO_ESG,
                    "Baixa": BAIXO_ESG
                },
                labels={"categoria_produto": "Categoria de Produto", "Quantidade": "Clientes"}
            )
    
            fig_categoria.update_layout(
                height=450,
                bargap=0.25,
                plot_bgcolor="#111111",
                paper_bgcolor="#111111",
                font_color="#FFFFFF",
                legend_title_text="Faixa ESG"
            )
    
            st.plotly_chart(fig_categoria, use_container_width=True)
        else:
            st.warning("Colunas necess√°rias n√£o encontradas: 'categoria_produto' ou 'faixa_propensao'.")
        
        st.markdown("### üåü Top 15 Clientes: Maior Capital e Maior Propens√£o ESG")

        if all(col in df.columns for col in ["propensao_esg", "ValorEmCaixa", "nome"]):
            # Calcular score baseado em capital * propens√£o
            df_temp = df.copy()
            df_temp["score"] = df_temp["ValorEmCaixa"] * df_temp["propensao_esg"]
            top_oportunidades = df_temp.sort_values(by="score", ascending=False).head(15)
    
            fig_top = px.scatter(
                top_oportunidades,
                x="propensao_esg",
                y="ValorEmCaixa",
                hover_name="nome",
                labels={
                    "propensao_esg": "Propens√£o ESG",
                    "ValorEmCaixa": "Capital Dispon√≠vel (R$)"
                },
                title="Top 15 Clientes com Maior Capital e Propens√£o ESG"
            )
    
            fig_top.update_traces(
                marker=dict(color= ALTO_ESG, size=12, line=dict(width=1, color='black')),
                hovertemplate="<b>%{hovertext}</b><br>Propens√£o: %{x:.2f}<br>Capital: R$ %{y:,.2f}<extra></extra>"
            )
    
            fig_top.update_layout(height=500)
            st.plotly_chart(fig_top, use_container_width=True)
        else:
            st.warning("Colunas necess√°rias n√£o encontradas: 'propensao_esg', 'ValorEmCaixa' ou 'nome'.")
    
    elif aba == "üìå Recomenda√ß√µes":
        st.subheader("üìå Recomenda√ß√µes por Faixa ESG")
        for _, cliente in df.iterrows():
            if cliente["faixa_propensao"] == "Baixa":
                acao = "Educar sobre ESG com conte√∫do introdut√≥rio."
            elif cliente["faixa_propensao"] == "M√©dia":
                acao = "Apresentar produtos ESG e estimular interesse."
            else:
                acao = "Alocar diretamente em produtos ESG recomendados."
            st.info(f"üë§ {cliente['nome']} ({cliente['PerfilRisco']}) ‚Üí {acao}")

    elif aba == "üí° Aloca√ß√£o Inteligente":
        st.subheader("üí° Aloca√ß√£o Inteligente com ESG")
    
        # Sele√ß√£o de cliente da base
        cliente_selecionado = st.selectbox("Selecione um cliente:", df["nome"])
        cliente_info = df[df["nome"] == cliente_selecionado].iloc[0]
        perfil = cliente_info["PerfilRisco"]
        st.markdown(f"**Perfil de Investidor XP:** {perfil}")
    
        # Defini√ß√µes de aloca√ß√£o padr√£o por perfil
        if perfil == "Conservador":
            carteira_base = {
                "Renda Fixa": 50000,
                "Multimercado": 30000,
                "Caixa": 20000
            }
        elif perfil == "Moderado":
            carteira_base = {
                "Multimercado": 40000,
                "Renda Fixa": 30000,
                "ETF": 30000
            }
        else:  # Agressivo
            carteira_base = {
                "Renda Vari√°vel": 40000,
                "ETF": 35000,
                "Multimercado": 25000
            }
    
        # Produtos ESG dispon√≠veis
        produtos_esg = [
            {"nome": "Fundo XP Essencial ESG", "categoria": "Renda Fixa", "risco": 3},
            {"nome": "Pandhora ESG Prev", "categoria": "Multimercado", "risco": 7},
            {"nome": "ETF XP Sustent√°vel", "categoria": "ETF", "risco": 10},
            {"nome": "Fundo XP Verde A√ß√µes", "categoria": "Renda Vari√°vel", "risco": 15}
        ]
    
        # Simular substitui√ß√µes parciais
        carteira_recomendada = []
        substituicoes = []
    
        for categoria, valor in carteira_base.items():
            if categoria in ["Caixa"]:
                carteira_recomendada.append({"Produto": categoria, "Valor": valor})
                continue
    
            esg_produto = next((p for p in produtos_esg if p["categoria"] == categoria), None)
            if esg_produto:
                valor_esg = valor * 0.5
                valor_tradicional = valor * 0.5
                carteira_recomendada.append({"Produto": f"{categoria} Tradicional", "Valor": valor_tradicional})
                carteira_recomendada.append({"Produto": f"{esg_produto['nome']}", "Valor": valor_esg})
                substituicoes.append({
                    "Categoria": categoria,
                    "ESG Sugerido": esg_produto["nome"],
                    "Porcentagem ESG": "50%",
                    "Motivo": "Risco compat√≠vel e dispon√≠vel ESG na mesma classe"
                })
            else:
                carteira_recomendada.append({"Produto": categoria, "Valor": valor})
    
        # Gr√°ficos
        col1, col2 = st.columns(2)
    
        with col1:
            df_atual = pd.DataFrame({"Produto": list(carteira_base.keys()), "Valor": list(carteira_base.values())})
            fig1 = px.pie(df_atual, names='Produto', values='Valor', title="Carteira Atual por Categoria")
            st.plotly_chart(fig1, use_container_width=True)
    
        with col2:
            df_nova = pd.DataFrame(carteira_recomendada)
            fig2 = px.pie(df_nova, names='Produto', values='Valor', title="Carteira Recomendada com ESG")
            st.plotly_chart(fig2, use_container_width=True)
    
        # Tabela de substitui√ß√µes
        if substituicoes:
            st.markdown("### üìå Substitui√ß√µes Recomendadas")
            st.dataframe(pd.DataFrame(substituicoes))
        else:
            st.info("Nenhuma substitui√ß√£o ESG recomendada no momento.")
            
    elif aba == "üì¢ Campanha":
        st.subheader("üì¢ Campanha de Aloca√ß√£o ESG")
    
        # Simular hist√≥rico de aloca√ß√£o do assessor e da m√©dia XP
        datas = pd.date_range(end=pd.Timestamp.today(), periods=12, freq='M')
        aloc_assessor = np.cumsum(np.random.randint(10000, 50000, size=12))
        aloc_xp = np.cumsum(np.random.randint(15000, 40000, size=12))
    
        df_campanha = pd.DataFrame({
            "Data": datas,
            "Assessor": aloc_assessor,
            "M√©dia XP": aloc_xp
        })
    
        # Gr√°fico de linha: evolu√ß√£o individual
        st.markdown("### üìà Aloca√ß√£o Acumulada ao Longo do Tempo")
        fig_crescimento = px.line(
            df_campanha,
            x="Data",
            y="Assessor",
            title="Aloca√ß√£o ESG - Assessor",
            markers=True,
            labels={"Assessor": "Valor Acumulado (R$)"},
            line_shape="linear"
        )
        fig_crescimento.update_traces(line=dict(color="#FFFF00", width=3))
    
        st.plotly_chart(fig_crescimento, use_container_width=True)
    
        # Gr√°fico comparativo: assessor vs XP
        st.markdown("### ‚öñÔ∏è Comparativo com M√©dia da XP")
        total_assessor = aloc_assessor[-1]
        total_xp = aloc_xp[-1]
    
        fig_barra = px.bar(
            x=["Assessor", "M√©dia XP"],
            y=[total_assessor, total_xp],
            labels={"x": "Origem", "y": "Valor Total Alocado"},
            color=["Assessor", "M√©dia XP"],
            title="Total Alocado no Ano"
        )
        st.plotly_chart(fig_barra, use_container_width=True)
    
        # Estat√≠sticas gerais
        st.markdown("### üßæ Estat√≠sticas da Campanha")
        st.metric("Total Alocado pelo Assessor", f"R$ {total_assessor:,.0f}")
        st.metric("M√©dia de Aloca√ß√£o XP", f"R$ {total_xp:,.0f}")
    
        # Sugest√µes de gamifica√ß√£o futura
        st.markdown("### üïπÔ∏è Ideias para Futuras Gamifica√ß√µes")
        st.markdown("- üèÜ **Ranking de Assessores por Aloca√ß√£o ESG**")
        st.markdown("- üéØ **Metas Mensais com Recompensas**")
        st.markdown("- ü•á **Badges como 'Top ESG' ou '100% Verde'**")
        st.markdown("- üìÖ **Miss√µes Semanais para Diversifica√ß√£o**")
        st.markdown("- üí∞ **Simula√ß√£o de Pontos ou Cashback Interno**")
